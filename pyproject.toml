[project]
name = "pox"
version = "0.1"
description = "Convert PO files to Excel Spreadsheets and back."
authors = [
    {name = "Martin Mahner", email = "martin@elephant.house"},
]
dependencies = [
    "polib>=1.2.0",     # To read and write .po files
    "openpyxl>=3.1.1",  # To read and write .xlsx files
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}

[project.optional-dependencies]
dev = [
    "django>=4.1.7",
    "pytest>=7.2.2",
    "black==23.1.0",
    "ruff==0.0.254",
    "ipdb>=0.13.11",
]

[build-system]
requires = ["pdm-pep517>=1.0"]
build-backend = "pdm.pep517.api"

[project.scripts]
"p" = "pox.cli.pox_convert:main"
"xop-convert" = "pox.cli.xop_convert:main"

[tool.pdm]

[tool.black]
target-version = ['py311']
include = '\.pyi?$'
exclude = "migrations"

[tool.ruff]
target-version = "py311"
exclude = ["migrations"]
select = ["ALL"]
ignore = [
  "A",        # Variable/Argument/Class attribute ... is shadowing a python builtin
  "ANN",      # Missing Annotations
  "ARG",      # Unused function/method argument
  "B904",     # Within an except clause, raise exceptions with `raise ... from err`
  "BLE",      # Do not catch blind exception: `Exception`
  "C90" ,     # Method is too complex
  "D",        # Missign or badly formatted docstrings
  "DJ006",    # Do not use `exclude` with `ModelForm`, use `fields` instead
  "DJ007",    # Do not use `__all__` with `ModelForm`, use `fields` instead
  "DJ008",    # Model does not define `__str__` method
  "E501",     # Line too long (>88)
  "EM",       # Exception must not use <string format>
  "ERA001",   # Found commented-out code
  "F405",     # Variable defined from star imports
  "FBT",      # Flake Boolean Trap (don't use arg=True in functions)
  "G004",     # Logging statement uses f-string
  "INP",      # File is part of an implicit namespace package. Add an `__init__.py`.
  "N8",       # Invalid class/method/function naming
  "PD011",    # Use `.to_numpy()` instead of `.values`
  "PLR09",    # Too many branches, arguments, statements
  "PLR1722",  # Consider using `sys.exit` instead of quit(
  "PLR2004",  # Magic value used in comparison, consider replacing <int> with a constant variable
  "PT009",    # Use a regular `assert` instead of unittest-style `assertEqual`
  "RET504",   # Unnecessary variable assignment before `return` statement
  "RET505",   # Unnecessary `elif` after `return` statement
  "RUF005",   # Consider `(list, *list) instead of concatenation
  "S101",     # Use of `assert` detected
  "S324",     # Probable use of insecure hash functions in `hashlib`: `md5`
  "SLF001",   # Private member accessed"
  "TCH002",   # Move third-party import into a type-checking block
  "TID252",   # Relative imports from parent modules are banned (from ..foo import bar)"
  "TRY",      # Consider code change
]

[tool.pytest.ini_options]
python_paths = ["pox"]
python_files = ["tests.py"]
filterwarnings = ["ignore::RuntimeWarning"]

[tool.mypy]
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
strict_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
